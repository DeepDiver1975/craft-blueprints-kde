--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -26,6 +26,9 @@
 if (TARGET Qt5::DBus)
   list(APPEND kconfigwidgets_SRCS kpastetextaction.cpp)
 endif()
+if (WIN32)
+  list(APPEND kconfigwidgets_SRCS windowsmessagesnotifier.cpp)
+endif()
 
 qt5_add_resources(kconfigwidgets_SRCS kconfigwidgets.qrc)
 
@@ -60,6 +63,9 @@
 if (TARGET Qt5::DBus)
   target_link_libraries(KF5ConfigWidgets PRIVATE Qt5::DBus) # KPasteTextAction talks to Klipper via DBus
 endif()
+if (WIN32)
+  target_link_libraries(KF5ConfigWidgets PRIVATE advapi32)
+endif()
 
 set_target_properties(KF5ConfigWidgets PROPERTIES VERSION   ${KCONFIGWIDGETS_VERSION_STRING}
                                                   SOVERSION ${KCONFIGWIDGETS_SOVERSION}
diff --git a/src/kcolorschememanager.cpp b/src/kcolorschememanager.cpp
index ca0004b..087a6e7 100644
--- a/src/kcolorschememanager.cpp
+++ b/src/kcolorschememanager.cpp
@@ -24,15 +24,21 @@
 #include <QStyle>
 
 constexpr int defaultSchemeRow = 0;
+static bool s_overrideAutoSwitch = false;
+static QString autoColorSchemePath;
 
-static void activateScheme(const QString &colorSchemePath)
+static void activateScheme(const QString &colorSchemePath, bool overrideAutoSwitch = true)
 {
+    s_overrideAutoSwitch = overrideAutoSwitch;
     // hint for plasma-integration to synchronize the color scheme with the window manager/compositor
     // The property needs to be set before the palette change because is is checked upon the
     // ApplicationPaletteChange event.
     qApp->setProperty("KDE_COLOR_SCHEME_PATH", colorSchemePath);
     if (colorSchemePath.isEmpty()) {
         qApp->setPalette(KColorScheme::createApplicationPalette(KSharedConfig::Ptr(nullptr)));
+        // enable auto-switch when Default color scheme is set
+        s_overrideAutoSwitch = false;
+        qApp->setPalette(KColorScheme::createApplicationPalette(KSharedConfig::openConfig(autoColorSchemePath)));
     } else {
         qApp->setPalette(KColorScheme::createApplicationPalette(KSharedConfig::openConfig(colorSchemePath)));
     }
@@ -71,8 +77,14 @@ static QIcon createPreview(const QString &path)
 
 KColorSchemeManagerPrivate::KColorSchemeManagerPrivate()
     : model(new KColorSchemeModel())
+#ifdef Q_OS_WIN
+    , m_windowsMessagesNotifier(new WindowsMessagesNotifier())
 {
+    QAbstractEventDispatcher::instance()->installNativeEventFilter(m_windowsMessagesNotifier);
 }
+#else
+{}
+#endif
 
 KColorSchemeModel::KColorSchemeModel(QObject *parent)
     : QAbstractListModel(parent)
@@ -152,6 +164,16 @@ KColorSchemeManager::KColorSchemeManager(QObject *parent)
     : QObject(parent)
     , d(new KColorSchemeManagerPrivate)
 {
+#ifdef Q_OS_WIN
+    connect(d->getWindowsMessagesNotifier(), &WindowsMessagesNotifier::wm_colorSchemeChanged, this, [this](){
+        const QString colorSchemeToApply = d->getWindowsMessagesNotifier()->preferDarkMode() ? d->getDarkColorScheme() : d->getLightColorScheme();
+        autoColorSchemePath = this->indexForScheme(colorSchemeToApply).data(Qt::UserRole).toString();
+        if (!s_overrideAutoSwitch) {
+            ::activateScheme(this->indexForScheme(colorSchemeToApply).data(Qt::UserRole).toString(), false);
+        }
+    });
+    d->getWindowsMessagesNotifier()->handleWMSettingChange();
+#endif
 }
 
 KColorSchemeManager::~KColorSchemeManager()
diff --git a/src/kcolorschememanager_p.h b/src/kcolorschememanager_p.h
index 4df51b2..8657f74 100644
--- a/src/kcolorschememanager_p.h
+++ b/src/kcolorschememanager_p.h
@@ -12,6 +12,10 @@
 #include <QIcon>
 #include <memory>
 
+#ifdef Q_OS_WIN
+#include "windowsmessagesnotifier.h"
+#endif
+
 struct KColorSchemeModelData {
     QString name;
     QString path;
@@ -38,6 +42,14 @@ public:
     KColorSchemeManagerPrivate();
 
     std::unique_ptr<KColorSchemeModel> model;
+#ifdef Q_OS_WIN
+    WindowsMessagesNotifier *m_windowsMessagesNotifier;
+    QString m_lightColorScheme = QStringLiteral("Breeze"), m_darkColorScheme = QStringLiteral("Breeze Dark");
+
+    WindowsMessagesNotifier* getWindowsMessagesNotifier() {return m_windowsMessagesNotifier;}
+    const QString& getLightColorScheme() {return m_lightColorScheme;}
+    const QString& getDarkColorScheme() {return m_darkColorScheme;}
+#endif
 };
 
 #endif
diff --git a/src/windowsmessagesnotifier.cpp b/src/windowsmessagesnotifier.cpp
new file mode 100644
index 0000000..5673a73
--- /dev/null
+++ b/src/windowsmessagesnotifier.cpp
@@ -0,0 +1,41 @@
+/*
+ * SPDX-FileCopyrightText: 2020 Piyush Aggarwal <piyushaggarwal002@gmail.com>
+ *
+ * SPDX-License-Identifier: LGPL-2.0-or-later
+ */
+
+#include "windowsmessagesnotifier.h"
+#include <QDebug>
+
+WindowsMessagesNotifier::WindowsMessagesNotifier() {}
+
+WindowsMessagesNotifier::~WindowsMessagesNotifier() {}
+
+bool WindowsMessagesNotifier::nativeEventFilter(const QByteArray &eventType, void *message, long *)
+{
+    MSG *msg = static_cast< MSG * >( message );
+    switch (msg->message)
+    {
+        case WM_SETTINGCHANGE: {
+            WindowsMessagesNotifier::handleWMSettingChange();
+            break;
+        }
+        default: {}
+    }
+    return false;
+}
+
+void WindowsMessagesNotifier::handleWMSettingChange()
+{
+    m_settings.sync();
+    const bool preferDarkModeNow = !(m_settings.value(QStringLiteral("SystemUsesLightTheme")).value<bool>());
+    if (m_preferDarkMode != preferDarkModeNow) {
+        m_preferDarkMode = preferDarkModeNow;
+        Q_EMIT WindowsMessagesNotifier::wm_colorSchemeChanged();
+    }
+}
+
+bool WindowsMessagesNotifier::preferDarkMode()
+{
+    return m_preferDarkMode;
+}
\ No newline at end of file
diff --git a/src/windowsmessagesnotifier.h b/src/windowsmessagesnotifier.h
new file mode 100644
index 0000000..7faaf09
--- /dev/null
+++ b/src/windowsmessagesnotifier.h
@@ -0,0 +1,39 @@
+/*
+ * SPDX-FileCopyrightText: 2020 Piyush Aggarwal <piyushaggarwal002@gmail.com>
+ *
+ * SPDX-License-Identifier: LGPL-2.0-or-later
+ */
+
+#ifndef WindowsMessagesNotifier_H
+#define WindowsMessagesNotifier_H
+
+#include <QSettings>
+#include <QAbstractNativeEventFilter>
+#include <QAbstractEventDispatcher>
+#include <QDebug>
+
+#include <windows.h>
+
+
+class WindowsMessagesNotifier
+    : public QObject, public QAbstractNativeEventFilter
+{
+    Q_OBJECT
+
+public:
+    WindowsMessagesNotifier();
+    ~WindowsMessagesNotifier();
+    virtual bool nativeEventFilter(const QByteArray &eventType, void *message, long *) Q_DECL_OVERRIDE;
+    void handleWMSettingChange();
+    bool preferDarkMode();
+
+Q_SIGNALS:
+    void wm_colorSchemeChanged();
+
+private:
+    const QString m_subKey {QStringLiteral("Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize")};
+    QSettings m_settings {QStringLiteral("HKEY_CURRENT_USER\\") + m_subKey, QSettings::NativeFormat};
+    bool m_preferDarkMode = false;
+};
+
+#endif // WindowsMessagesNotifier_H
