diff --git a/CMakeLists.txt b/CMakeLists.txt
index c294b85e..501b68de 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -64,11 +64,8 @@ find_package(LibGit2 "0.22.0")
 # EditorConfig integration
 find_package(EditorConfig)
 
-# vi mode on per default
-option (BUILD_VIMODE "Build vimode in" ON)
-set(EXCLUDE_DEPRECATED_BEFORE_AND_AT 0 CACHE STRING "Control the range of deprecated API excluded from the build [default=0].")
-
 # forbid some old things
+set(EXCLUDE_DEPRECATED_BEFORE_AND_AT 0 CACHE STRING "Control the range of deprecated API excluded from the build [default=0].")
 add_definitions(-DQT_NO_FOREACH)
 add_definitions(-DQT_DISABLE_DEPRECATED_BEFORE=0x050e00)
 add_definitions(-DKF_DISABLE_DEPRECATED_BEFORE_AND_AT=0x055000)
diff --git a/autotests/CMakeLists.txt b/autotests/CMakeLists.txt
index 77409e9f..a95b014b 100644
--- a/autotests/CMakeLists.txt
+++ b/autotests/CMakeLists.txt
@@ -159,9 +159,7 @@ ktexteditor_unit_test(bug313759 src/testutils.cpp)
 ktexteditor_unit_test(bug317111 src/testutils.cpp)
 ktexteditor_unit_test(bug205447 src/testutils.cpp)
 
-if (BUILD_VIMODE)
-  add_subdirectory(src/vimode)
-endif()
+add_subdirectory(src/vimode)
 
 # benchmarking tests
 add_executable(bench_search src/benchmarks/bench_search.cpp)
diff --git a/config.h.cmake b/config.h.cmake
index 6b4a1fa4..e04c8ff7 100644
--- a/config.h.cmake
+++ b/config.h.cmake
@@ -7,6 +7,5 @@
 #cmakedefine01 LIBGIT2_FOUND
 
 #cmakedefine01 HAVE_FDATASYNC
-#cmakedefine01 BUILD_VIMODE
 
 #endif
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 42de4687..1ec22328 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -252,7 +252,6 @@ dialogs/spellcheckconfigwidget.ui)
 
 qt5_add_resources( ktexteditor_LIB_SRCS data/ktexteditor.qrc "${CMAKE_CURRENT_BINARY_DIR}/script/data/script.qrc")
 
-if (BUILD_VIMODE)
   ki18n_wrap_ui(ktexteditor_LIB_SRCS vimode/config/configwidget.ui)
   set(ktexteditor_LIB_SRCS ${ktexteditor_LIB_SRCS}
     inputmode/kateviinputmode.cpp
@@ -297,7 +296,6 @@ if (BUILD_VIMODE)
     vimode/macrorecorder.cpp
     vimode/lastchangerecorder.cpp
   )
-endif()
 
 add_library(KF5TextEditor ${ktexteditor_LIB_SRCS} ${KTEXTEDITOR_PUBLIC_HEADERS})
 ecm_generate_export_header(KF5TextEditor
diff --git a/src/buffer/katetextblock.h b/src/buffer/katetextblock.h
index ae4350b6..a31cea2c 100644
--- a/src/buffer/katetextblock.h
+++ b/src/buffer/katetextblock.h
@@ -89,7 +89,7 @@ public:
      */
     int lines() const
     {
-        return m_lines.size();
+        return static_cast<int>(m_lines.size());
     }
 
     /**
diff --git a/src/dialogs/katedialogs.cpp b/src/dialogs/katedialogs.cpp
index b537315d..b62794ad 100644
--- a/src/dialogs/katedialogs.cpp
+++ b/src/dialogs/katedialogs.cpp
@@ -436,8 +436,7 @@ KateEditGeneralConfigTab::KateEditGeneralConfigTab(QWidget *parent)
     ui = new Ui::EditConfigWidget();
     ui->setupUi(newWidget);
 
-    const QList<KateAbstractInputModeFactory *> inputModes = KTextEditor::EditorPrivate::self()->inputModeFactories();
-    for (KateAbstractInputModeFactory *fact : inputModes) {
+    for (const auto &fact : KTextEditor::EditorPrivate::self()->inputModeFactories()) {
         ui->cmbInputMode->addItem(fact->name(), static_cast<int>(fact->inputMode()));
     }
 
@@ -577,8 +576,7 @@ KateEditConfigTab::KateEditConfigTab(QWidget *parent)
     observeChanges(spellCheckConfigTab);
 
     int i = tabWidget->count();
-    const auto inputModeFactories = KTextEditor::EditorPrivate::self()->inputModeFactories();
-    for (KateAbstractInputModeFactory *factory : inputModeFactories) {
+    for (const auto &factory : KTextEditor::EditorPrivate::self()->inputModeFactories()) {
         KateConfigPage *tab = factory->createConfigPage(this);
         if (tab) {
             m_inputModeConfigTabs << tab;
diff --git a/src/inputmode/kateabstractinputmode.cpp b/src/inputmode/kateabstractinputmode.cpp
index 0c431bb7..1e5d3870 100644
--- a/src/inputmode/kateabstractinputmode.cpp
+++ b/src/inputmode/kateabstractinputmode.cpp
@@ -7,10 +7,6 @@
 #include "kateabstractinputmode.h"
 #include "kateviewinternal.h"
 
-KateAbstractInputMode::~KateAbstractInputMode()
-{
-}
-
 KateAbstractInputMode::KateAbstractInputMode(KateViewInternal *viewInternal)
     : m_viewInternal(viewInternal)
     , m_view(viewInternal->view())
diff --git a/src/inputmode/kateabstractinputmode.h b/src/inputmode/kateabstractinputmode.h
index 05207730..593f32ff 100644
--- a/src/inputmode/kateabstractinputmode.h
+++ b/src/inputmode/kateabstractinputmode.h
@@ -30,7 +30,7 @@ protected:
     KateAbstractInputMode(KateViewInternal *);
 
 public:
-    virtual ~KateAbstractInputMode();
+    virtual ~KateAbstractInputMode() = default;
 
     virtual KTextEditor::View::ViewMode viewMode() const = 0;
     virtual QString viewModeHuman() const = 0;
diff --git a/src/inputmode/katenormalinputmode.cpp b/src/inputmode/katenormalinputmode.cpp
index d2c07238..1c26e43a 100644
--- a/src/inputmode/katenormalinputmode.cpp
+++ b/src/inputmode/katenormalinputmode.cpp
@@ -16,17 +16,9 @@
 
 KateNormalInputMode::KateNormalInputMode(KateViewInternal *viewInternal)
     : KateAbstractInputMode(viewInternal)
-    , m_searchBar(nullptr)
-    , m_cmdLine(nullptr)
 {
 }
 
-KateNormalInputMode::~KateNormalInputMode()
-{
-    delete m_cmdLine;
-    delete m_searchBar;
-}
-
 void KateNormalInputMode::activate()
 {
     view()->activateEditActions();
@@ -171,7 +163,7 @@ KateSearchBar *KateNormalInputMode::searchBar(const SearchBarMode mode)
 
     // create search bar is not there? use right mode
     if (!m_searchBar) {
-        m_searchBar = new KateSearchBar(wantPowerMode, view(), KateViewConfig::global());
+        m_searchBar.reset(new KateSearchBar(wantPowerMode, view(), KateViewConfig::global()));
     }
 
     // else: switch mode if needed!
@@ -183,17 +175,17 @@ KateSearchBar *KateNormalInputMode::searchBar(const SearchBarMode mode)
         }
     }
 
-    return m_searchBar;
+    return m_searchBar.get();
 }
 
 KateCommandLineBar *KateNormalInputMode::cmdLineBar()
 {
     if (!m_cmdLine) {
-        m_cmdLine = new KateCommandLineBar(view(), view()->bottomViewBar());
-        view()->bottomViewBar()->addBarWidget(m_cmdLine);
+        m_cmdLine.reset(new KateCommandLineBar(view(), view()->bottomViewBar()));
+        view()->bottomViewBar()->addBarWidget(m_cmdLine.get());
     }
 
-    return m_cmdLine;
+    return m_cmdLine.get();
 }
 
 void KateNormalInputMode::updateRendererConfig()
diff --git a/src/inputmode/katenormalinputmode.h b/src/inputmode/katenormalinputmode.h
index 8396535d..110b8d7a 100644
--- a/src/inputmode/katenormalinputmode.h
+++ b/src/inputmode/katenormalinputmode.h
@@ -7,6 +7,8 @@
 #ifndef KATE_NORMAL_INPUT_MODE_H
 #define KATE_NORMAL_INPUT_MODE_H
 
+#include <memory>
+
 #include "kateabstractinputmode.h"
 
 class KateNormalInputModeFactory;
@@ -19,8 +21,6 @@ class KateNormalInputMode : public KateAbstractInputMode
     friend KateNormalInputModeFactory;
 
 public:
-    ~KateNormalInputMode() override;
-
     KTextEditor::View::ViewMode viewMode() const override;
     QString viewModeHuman() const override;
     KTextEditor::View::InputMode viewInputMode() const override;
@@ -85,7 +85,7 @@ private:
      */
     bool hasSearchBar() const
     {
-        return m_searchBar;
+        return m_searchBar.get();
     }
 
     /**
@@ -95,8 +95,8 @@ private:
     KateCommandLineBar *cmdLineBar();
 
 private:
-    KateSearchBar *m_searchBar;
-    KateCommandLineBar *m_cmdLine;
+    std::unique_ptr<KateSearchBar> m_searchBar;
+    std::unique_ptr<KateCommandLineBar> m_cmdLine;
 };
 
 #endif
diff --git a/src/inputmode/katenormalinputmodefactory.cpp b/src/inputmode/katenormalinputmodefactory.cpp
index 5fc9942e..89cd3561 100644
--- a/src/inputmode/katenormalinputmodefactory.cpp
+++ b/src/inputmode/katenormalinputmodefactory.cpp
@@ -9,15 +9,6 @@
 
 #include <KLocalizedString>
 
-KateNormalInputModeFactory::KateNormalInputModeFactory()
-    : KateAbstractInputModeFactory()
-{
-}
-
-KateNormalInputModeFactory::~KateNormalInputModeFactory()
-{
-}
-
 KateAbstractInputMode *KateNormalInputModeFactory::createInputMode(KateViewInternal *viewInternal)
 {
     return new KateNormalInputMode(viewInternal);
diff --git a/src/inputmode/katenormalinputmodefactory.h b/src/inputmode/katenormalinputmodefactory.h
index 3d215177..df7b0f15 100644
--- a/src/inputmode/katenormalinputmodefactory.h
+++ b/src/inputmode/katenormalinputmodefactory.h
@@ -12,9 +12,7 @@
 class KateNormalInputModeFactory : public KateAbstractInputModeFactory
 {
 public:
-    KateNormalInputModeFactory();
-
-    ~KateNormalInputModeFactory() override;
+    KateNormalInputModeFactory() = default;
     KateAbstractInputMode *createInputMode(KateViewInternal *viewInternal) override;
 
     QString name() override;
diff --git a/src/inputmode/kateviinputmode.cpp b/src/inputmode/kateviinputmode.cpp
index 6e6574f1..fd93999c 100644
--- a/src/inputmode/kateviinputmode.cpp
+++ b/src/inputmode/kateviinputmode.cpp
@@ -9,7 +9,6 @@
 #include "katedocument.h"
 #include "kateviewinternal.h"
 #include <vimode/emulatedcommandbar/emulatedcommandbar.h>
-#include <vimode/inputmodemanager.h>
 #include <vimode/macrorecorder.h>
 #include <vimode/marks.h>
 #include <vimode/modes/replacevimode.h>
@@ -56,15 +55,10 @@ KateViInputMode::KateViInputMode(KateViewInternal *viewInternal, KateVi::GlobalS
     , m_viGlobal(global)
     , m_caret(KateRenderer::Block)
     , m_nextKeypressIsOverriddenShortCut(false)
+    , m_relLineNumbers(KateViewConfig::global()->viRelativeLineNumbers())
     , m_activated(false)
+    , m_viModeManager(new KateVi::InputModeManager(this, view(), viewInternal))
 {
-    m_relLineNumbers = KateViewConfig::global()->viRelativeLineNumbers();
-    m_viModeManager = new KateVi::InputModeManager(this, view(), viewInternal);
-}
-
-KateViInputMode::~KateViInputMode()
-{
-    delete m_viModeManager;
 }
 
 void KateViInputMode::activate()
@@ -99,11 +93,12 @@ void KateViInputMode::reset()
         m_viModeEmulatedCommandBar->hideMe();
     }
 
-    delete m_viModeManager;
-    m_viModeManager = new KateVi::InputModeManager(this, view(), viewInternal());
+    // ensure first the old stuff is deleted and then the new manager is constructed
+    m_viModeManager.reset();
+    m_viModeManager.reset(new KateVi::InputModeManager(this, view(), viewInternal()));
 
     if (m_viModeEmulatedCommandBar) {
-        m_viModeEmulatedCommandBar->setViInputModeManager(m_viModeManager);
+        m_viModeEmulatedCommandBar->setViInputModeManager(m_viModeManager.get());
     }
 }
 
@@ -255,7 +250,7 @@ void KateViInputMode::showViModeEmulatedCommandBar()
 KateVi::EmulatedCommandBar *KateViInputMode::viModeEmulatedCommandBar()
 {
     if (!m_viModeEmulatedCommandBar) {
-        m_viModeEmulatedCommandBar = new KateVi::EmulatedCommandBar(this, m_viModeManager, view());
+        m_viModeEmulatedCommandBar = new KateVi::EmulatedCommandBar(this, m_viModeManager.get(), view());
         m_viModeEmulatedCommandBar->hide();
     }
 
diff --git a/src/inputmode/kateviinputmode.h b/src/inputmode/kateviinputmode.h
index 76837196..39f22f2c 100644
--- a/src/inputmode/kateviinputmode.h
+++ b/src/inputmode/kateviinputmode.h
@@ -7,12 +7,15 @@
 #ifndef KATE_VI_INPUT_MODE_H
 #define KATE_VI_INPUT_MODE_H
 
+#include <memory>
+
 #include "kateabstractinputmode.h"
 
+#include <vimode/inputmodemanager.h>
+
 namespace KateVi
 {
 class GlobalState;
-class InputModeManager;
 class EmulatedCommandBar;
 }
 class KateViInputModeFactory;
@@ -23,8 +26,6 @@ class KTEXTEDITOR_EXPORT KateViInputMode : public KateAbstractInputMode
     friend KateViInputModeFactory;
 
 public:
-    ~KateViInputMode() override;
-
     KTextEditor::View::ViewMode viewMode() const override;
     QString viewModeHuman() const override;
     KTextEditor::View::InputMode viewInputMode() const override;
@@ -76,7 +77,7 @@ public:
     }
     inline KateVi::InputModeManager *viInputModeManager() const
     {
-        return m_viModeManager;
+        return m_viModeManager.get();
     }
     inline bool isActive() const
     {
@@ -85,7 +86,6 @@ public:
     void setCaretStyle(const KateRenderer::caretStyles caret);
 
 private:
-    KateVi::InputModeManager *m_viModeManager;
     KateVi::EmulatedCommandBar *m_viModeEmulatedCommandBar;
     KateVi::GlobalState *m_viGlobal;
     KateRenderer::caretStyles m_caret;
@@ -95,6 +95,8 @@ private:
     // configs
     bool m_relLineNumbers;
     bool m_activated;
+
+    std::unique_ptr<KateVi::InputModeManager> m_viModeManager;
 };
 
 #endif
diff --git a/src/inputmode/kateviinputmodefactory.cpp b/src/inputmode/kateviinputmodefactory.cpp
index fbc12361..9b165552 100644
--- a/src/inputmode/kateviinputmodefactory.cpp
+++ b/src/inputmode/kateviinputmodefactory.cpp
@@ -18,14 +18,9 @@ KateViInputModeFactory::KateViInputModeFactory()
 {
 }
 
-KateViInputModeFactory::~KateViInputModeFactory()
-{
-    delete m_viGlobal;
-}
-
 KateAbstractInputMode *KateViInputModeFactory::createInputMode(KateViewInternal *viewInternal)
 {
-    return new KateViInputMode(viewInternal, m_viGlobal);
+    return new KateViInputMode(viewInternal, m_viGlobal.get());
 }
 
 KateConfigPage *KateViInputModeFactory::createConfigPage(QWidget *parent)
diff --git a/src/inputmode/kateviinputmodefactory.h b/src/inputmode/kateviinputmodefactory.h
index 017e3b21..5923fd4a 100644
--- a/src/inputmode/kateviinputmodefactory.h
+++ b/src/inputmode/kateviinputmodefactory.h
@@ -7,6 +7,8 @@
 #ifndef KATE_VI_INPUT_MODE_FACTORY_H
 #define KATE_VI_INPUT_MODE_FACTORY_H
 
+#include <memory>
+
 #include "kateabstractinputmodefactory.h"
 
 namespace KateVi
@@ -22,7 +24,6 @@ class KateViInputModeFactory : public KateAbstractInputModeFactory
 public:
     KateViInputModeFactory();
 
-    ~KateViInputModeFactory() override;
     KateAbstractInputMode *createInputMode(KateViewInternal *viewInternal) override;
 
     QString name() override;
@@ -31,7 +32,7 @@ public:
     KateConfigPage *createConfigPage(QWidget *) override;
 
 private:
-    KateVi::GlobalState *m_viGlobal;
+    std::unique_ptr<KateVi::GlobalState> m_viGlobal;
 };
 
 #endif
diff --git a/src/utils/kateglobal.cpp b/src/utils/kateglobal.cpp
index c9859734..a1f881ff 100644
--- a/src/utils/kateglobal.cpp
+++ b/src/utils/kateglobal.cpp
@@ -183,14 +183,9 @@ KTextEditor::EditorPrivate::EditorPrivate(QPointer<KTextEditor::EditorPrivate> &
     //
     // input mode factories
     //
-    KateAbstractInputModeFactory *fact;
-    fact = new KateNormalInputModeFactory();
-    m_inputModeFactories.insert(KTextEditor::View::NormalInputMode, fact);
-
-#if BUILD_VIMODE
-    fact = new KateViInputModeFactory();
-    m_inputModeFactories.insert(KTextEditor::View::ViInputMode, fact);
-#endif
+    Q_ASSERT(m_inputModeFactories.size() == KTextEditor::View::ViInputMode + 1);
+    m_inputModeFactories[KTextEditor::View::NormalInputMode].reset(new KateNormalInputModeFactory());
+    m_inputModeFactories[KTextEditor::View::ViInputMode].reset(new KateViInputModeFactory());
 
     //
     // spell check manager
@@ -253,8 +248,6 @@ KTextEditor::EditorPrivate::~EditorPrivate()
     qDeleteAll(m_cmds);
     delete m_cmdManager;
 
-    qDeleteAll(m_inputModeFactories);
-
     // shutdown libgit2, we require at least 0.22 which has this function!
 #if LIBGIT2_FOUND
     git_libgit2_shutdown();
@@ -464,11 +457,6 @@ bool KTextEditor::EditorPrivate::eventFilter(QObject *obj, QEvent *event)
     return false; // always continue processing
 }
 
-QList<KateAbstractInputModeFactory *> KTextEditor::EditorPrivate::inputModeFactories()
-{
-    return m_inputModeFactories.values();
-}
-
 QStringListModel *KTextEditor::EditorPrivate::searchHistoryModel()
 {
     if (!m_searchHistoryModel) {
diff --git a/src/utils/kateglobal.h b/src/utils/kateglobal.h
index 08341739..8f831d12 100644
--- a/src/utils/kateglobal.h
+++ b/src/utils/kateglobal.h
@@ -26,6 +26,9 @@
 #include <QPointer>
 #include <QScopedPointer>
 
+#include <array>
+#include <memory>
+
 class QStringListModel;
 
 class KateCmd;
@@ -378,7 +381,10 @@ public:
     /**
      * @return list of available input mode factories
      */
-    QList<KateAbstractInputModeFactory *> inputModeFactories();
+    const std::array<std::unique_ptr<KateAbstractInputModeFactory>, KTextEditor::View::ViInputMode + 1> &inputModeFactories()
+    {
+        return m_inputModeFactories;
+    }
 
     /**
      * Search pattern history shared among simple/power search instances.
@@ -531,9 +537,10 @@ private:
     KTextEditor::MainWindow m_dummyMainWindow;
 
     /**
-     * input modes map
+     * input modes factories
+     * for all input modes in the KTextEditor::View::InputMode we have here an entry
      */
-    QMap<KTextEditor::View::InputMode, KateAbstractInputModeFactory *> m_inputModeFactories;
+    std::array<std::unique_ptr<KateAbstractInputModeFactory>, KTextEditor::View::ViInputMode + 1> m_inputModeFactories;
 
     /**
      * Shared history models for search & replace.
diff --git a/src/view/kateview.cpp b/src/view/kateview.cpp
index 790dc839..fa6c502f 100644
--- a/src/view/kateview.cpp
+++ b/src/view/kateview.cpp
@@ -788,7 +788,7 @@ void KTextEditor::ViewPrivate::setupActions()
     auto switchInputModeAction = ac->action(QStringLiteral("switch_next_input_mode"));
     am->addAction(switchInputModeAction);
     am->addSeparator();
-    for (KateAbstractInputMode *mode : qAsConst(m_viewInternal->m_inputModes)) {
+    for (const auto &mode : m_viewInternal->m_inputModes) {
         a = new QAction(mode->viewInputModeHuman(), m_inputModeActions);
         am->addAction(a);
         a->setWhatsThis(i18n("Activate/deactivate %1", mode->viewInputModeHuman()));
@@ -1401,12 +1401,8 @@ void KTextEditor::ViewPrivate::setInputMode(KTextEditor::View::InputMode mode)
         return;
     }
 
-    if (!m_viewInternal->m_inputModes.contains(mode)) {
-        return;
-    }
-
     m_viewInternal->m_currentInputMode->deactivate();
-    m_viewInternal->m_currentInputMode = m_viewInternal->m_inputModes[mode];
+    m_viewInternal->m_currentInputMode = m_viewInternal->m_inputModes[mode].get();
     m_viewInternal->m_currentInputMode->activate();
 
     config()->setValue(KateViewConfig::InputMode,
@@ -1654,7 +1650,7 @@ void KTextEditor::ViewPrivate::readSessionConfig(const KConfigGroup &config, con
     m_savedFoldingState = QJsonDocument::fromJson(config.readEntry("TextFolding", QByteArray()));
     applyFoldingState();
 
-    for (KateAbstractInputMode *mode : qAsConst(m_viewInternal->m_inputModes)) {
+    for (const auto &mode : m_viewInternal->m_inputModes) {
         mode->readSessionConfig(config);
     }
 }
@@ -1674,7 +1670,7 @@ void KTextEditor::ViewPrivate::writeSessionConfig(KConfigGroup &config, const QS
     config.writeEntry("TextFolding", m_savedFoldingState.toJson(QJsonDocument::Compact));
     m_savedFoldingState = QJsonDocument();
 
-    for (KateAbstractInputMode *mode : qAsConst(m_viewInternal->m_inputModes)) {
+    for (const auto &mode : m_viewInternal->m_inputModes) {
         mode->writeSessionConfig(config);
     }
 }
@@ -1983,7 +1979,7 @@ void KTextEditor::ViewPrivate::updateConfig()
 
     m_viewInternal->setAutoCenterLines(config()->autoCenterLines());
 
-    for (KateAbstractInputMode *input : qAsConst(m_viewInternal->m_inputModes)) {
+    for (const auto &input : m_viewInternal->m_inputModes) {
         input->updateConfig();
     }
 
diff --git a/src/view/kateviewinternal.cpp b/src/view/kateviewinternal.cpp
index 6b054353..0202a2d8 100644
--- a/src/view/kateviewinternal.cpp
+++ b/src/view/kateviewinternal.cpp
@@ -141,12 +141,13 @@ KateViewInternal::KateViewInternal(KTextEditor::ViewPrivate *view)
     , m_textHintPos(-1, -1)
     , m_imPreeditRange(nullptr)
 {
-    const QList<KateAbstractInputModeFactory *> factories = KTextEditor::EditorPrivate::self()->inputModeFactories();
-    for (KateAbstractInputModeFactory *factory : factories) {
-        KateAbstractInputMode *m = factory->createInputMode(this);
-        m_inputModes.insert(m->viewInputMode(), m);
-    }
-    m_currentInputMode = m_inputModes[KTextEditor::View::NormalInputMode]; // TODO: twisted, but needed
+    // setup input modes
+    Q_ASSERT(m_inputModes.size() == KTextEditor::EditorPrivate::self()->inputModeFactories().size());
+    m_inputModes[KTextEditor::View::NormalInputMode].reset(
+        KTextEditor::EditorPrivate::self()->inputModeFactories()[KTextEditor::View::NormalInputMode]->createInputMode(this));
+    m_inputModes[KTextEditor::View::ViInputMode].reset(
+        KTextEditor::EditorPrivate::self()->inputModeFactories()[KTextEditor::View::ViInputMode]->createInputMode(this));
+    m_currentInputMode = m_inputModes[KTextEditor::View::NormalInputMode].get();
 
     setMinimumSize(0, 0);
     setAttribute(Qt::WA_OpaquePaintEvent);
@@ -287,8 +288,6 @@ KateViewInternal::~KateViewInternal()
     delete m_imPreeditRange;
     qDeleteAll(m_imPreeditRangeChildren);
 
-    qDeleteAll(m_inputModes);
-
     // delete bracket markers
     delete m_bm;
     delete m_bmStart;
diff --git a/src/view/kateviewinternal.h b/src/view/kateviewinternal.h
index 02d135f2..238476f8 100644
--- a/src/view/kateviewinternal.h
+++ b/src/view/kateviewinternal.h
@@ -28,6 +28,7 @@
 #include <QTimer>
 #include <QWidget>
 
+#include <array>
 #include <memory>
 
 namespace KTextEditor
@@ -465,7 +466,7 @@ private:
 
     // input modes
 private:
-    QMap<KTextEditor::View::InputMode, KateAbstractInputMode *> m_inputModes;
+    std::array<std::unique_ptr<KateAbstractInputMode>, KTextEditor::View::ViInputMode + 1> m_inputModes;
     KateAbstractInputMode *m_currentInputMode;
 
     KateInlineNoteData m_activeInlineNote;
diff --git a/src/vimode/command.h b/src/vimode/command.h
index d5d86fb1..0c6201b0 100644
--- a/src/vimode/command.h
+++ b/src/vimode/command.h
@@ -73,7 +73,6 @@ protected:
     QString m_pattern;
     unsigned int m_flags;
     bool (NormalViMode::*m_ptr2commandMethod)();
-    KeyParser *m_keyParser;
 };
 
 }
diff --git a/src/vimode/modes/modebase.h b/src/vimode/modes/modebase.h
index 954321b9..eb71a2a2 100644
--- a/src/vimode/modes/modebase.h
+++ b/src/vimode/modes/modebase.h
@@ -39,13 +39,8 @@ class KTEXTEDITOR_EXPORT ModeBase : public QObject
     Q_OBJECT
 
 public:
-    ModeBase()
-        : QObject()
-    {
-    }
-    virtual ~ModeBase()
-    {
-    }
+    ModeBase() = default;
+    virtual ~ModeBase() = default;
 
     /**
      * @return normal mode command accumulated so far
diff --git a/src/vimode/modes/normalvimode.cpp b/src/vimode/modes/normalvimode.cpp
index d0cfda27..7f0df368 100644
--- a/src/vimode/modes/normalvimode.cpp
+++ b/src/vimode/modes/normalvimode.cpp
@@ -44,9 +44,9 @@
 
 using namespace KateVi;
 
-#define ADDCMD(STR, FUNC, FLGS) m_commands.push_back(new Command(this, QStringLiteral(STR), &NormalViMode::FUNC, FLGS));
+#define ADDCMD(STR, FUNC, FLGS) m_commands.emplace_back(this, QStringLiteral(STR), &NormalViMode::FUNC, FLGS);
 
-#define ADDMOTION(STR, FUNC, FLGS) m_motions.push_back(new Motion(this, QStringLiteral(STR), &NormalViMode::FUNC, FLGS));
+#define ADDMOTION(STR, FUNC, FLGS) m_motions.emplace_back(this, QStringLiteral(STR), &NormalViMode::FUNC, FLGS);
 
 NormalViMode::NormalViMode(InputModeManager *viInputModeManager, KTextEditor::ViewPrivate *view, KateViewInternal *viewInternal)
     : ModeBase()
@@ -86,8 +86,6 @@ NormalViMode::NormalViMode(InputModeManager *viInputModeManager, KTextEditor::Vi
 
 NormalViMode::~NormalViMode()
 {
-    qDeleteAll(m_commands);
-    qDeleteAll(m_motions);
     qDeleteAll(m_highlightedYanks);
 }
 
@@ -217,8 +215,8 @@ bool NormalViMode::handleKeypress(const QKeyEvent *e)
 
         // remove commands not matching anymore
         for (int i = n; i >= 0; i--) {
-            if (!m_commands.at(m_matchingCommands.at(i))->matches(m_keys)) {
-                if (m_commands.at(m_matchingCommands.at(i))->needsMotion()) {
+            if (!m_commands.at(m_matchingCommands.at(i)).matches(m_keys)) {
+                if (m_commands.at(m_matchingCommands.at(i)).needsMotion()) {
                     // "cache" command needing a motion for later
                     m_motionOperatorIndex = m_matchingCommands.at(i);
                 }
@@ -230,17 +228,17 @@ bool NormalViMode::handleKeypress(const QKeyEvent *e)
         // push the current command length to m_awaitingMotionOrTextObject so one
         // knows where to split the command between the operator and the motion
         for (int i = 0; i < m_matchingCommands.size(); i++) {
-            if (m_commands.at(m_matchingCommands.at(i))->needsMotion()) {
+            if (m_commands.at(m_matchingCommands.at(i)).needsMotion()) {
                 m_awaitingMotionOrTextObject.push(m_keys.size());
                 break;
             }
         }
     } else {
         // go through all registered commands and put possible matches in m_matchingCommands
-        for (int i = 0; i < m_commands.size(); i++) {
-            if (m_commands.at(i)->matches(m_keys)) {
+        for (size_t i = 0; i < m_commands.size(); i++) {
+            if (m_commands.at(i).matches(m_keys)) {
                 m_matchingCommands.push_back(i);
-                if (m_commands.at(i)->needsMotion() && m_commands.at(i)->pattern().length() == m_keys.size()) {
+                if (m_commands.at(i).needsMotion() && m_commands.at(i).pattern().length() == m_keys.size()) {
                     m_awaitingMotionOrTextObject.push(m_keys.size());
                 }
             }
@@ -262,23 +260,23 @@ bool NormalViMode::handleKeypress(const QKeyEvent *e)
     // m_matchingMotions should be checked
     bool motionExecuted = false;
     if (checkFrom < m_keys.size()) {
-        for (int i = 0; i < m_motions.size(); i++) {
+        for (size_t i = 0; i < m_motions.size(); i++) {
             const QString motion = m_keys.mid(checkFrom);
-            if (m_motions.at(i)->matches(motion)) {
+            if (m_motions.at(i).matches(motion)) {
                 m_lastMotionWasLinewiseInnerBlock = false;
                 m_matchingMotions.push_back(i);
 
                 // if it matches exact, we have found the motion command to execute
-                if (m_motions.at(i)->matchesExact(motion)) {
+                if (m_motions.at(i).matchesExact(motion)) {
                     m_currentMotionWasVisualLineUpOrDown = false;
                     motionExecuted = true;
                     if (checkFrom == 0) {
                         // no command given before motion, just move the cursor to wherever
                         // the motion says it should go to
-                        Range r = m_motions.at(i)->execute();
-                        m_motionCanChangeWholeVisualModeSelection = m_motions.at(i)->canChangeWholeVisualModeSelection();
+                        Range r = m_motions.at(i).execute();
+                        m_motionCanChangeWholeVisualModeSelection = m_motions.at(i).canChangeWholeVisualModeSelection();
 
-                        if (!m_motions.at(i)->canLandInsideFoldingRange()) {
+                        if (!m_motions.at(i).canLandInsideFoldingRange()) {
                             // jump over folding regions since we are just moving the cursor
                             // except for motions that can end up inside ranges (e.g. n/N, f/F, %, #)
                             int currLine = m_view->cursorPosition().line();
@@ -324,8 +322,8 @@ bool NormalViMode::handleKeypress(const QKeyEvent *e)
                         // execute the specified command and supply the position returned from
                         // the motion
 
-                        m_commandRange = m_motions.at(i)->execute();
-                        m_linewiseCommand = m_motions.at(i)->isLineWise();
+                        m_commandRange = m_motions.at(i).execute();
+                        m_linewiseCommand = m_motions.at(i).isLineWise();
 
                         // if we didn't get an explicit start position, use the current cursor position
                         if (m_commandRange.startLine == -1) {
@@ -337,7 +335,7 @@ bool NormalViMode::handleKeypress(const QKeyEvent *e)
                         // special case: When using the "w" motion in combination with an operator and
                         // the last word moved over is at the end of a line, the end of that word
                         // becomes the end of the operated text, not the first word in the next line.
-                        if (m_motions.at(i)->pattern() == QLatin1String("w") || m_motions.at(i)->pattern() == QLatin1String("W")) {
+                        if (m_motions.at(i).pattern() == QLatin1String("w") || m_motions.at(i).pattern() == QLatin1String("W")) {
                             if (m_commandRange.endLine != m_commandRange.startLine && m_commandRange.endColumn == getFirstNonBlank(m_commandRange.endLine)) {
                                 m_commandRange.endLine--;
                                 m_commandRange.endColumn = doc()->lineLength(m_commandRange.endLine);
@@ -347,7 +345,7 @@ bool NormalViMode::handleKeypress(const QKeyEvent *e)
                         m_commandWithMotion = true;
 
                         if (m_commandRange.valid) {
-                            executeCommand(m_commands.at(m_motionOperatorIndex));
+                            executeCommand(&m_commands.at(m_motionOperatorIndex));
                         } else {
                             qCDebug(LOG_KTE) << "Invalid range: "
                                              << "from (" << m_commandRange.startLine << "," << m_commandRange.startColumn << ")"
@@ -381,16 +379,16 @@ bool NormalViMode::handleKeypress(const QKeyEvent *e)
     // if we have only one match, check if it is a perfect match and if so, execute it
     // if it's not waiting for a motion or a text object
     if (m_matchingCommands.size() == 1) {
-        if (m_commands.at(m_matchingCommands.at(0))->matchesExact(m_keys) && !m_commands.at(m_matchingCommands.at(0))->needsMotion()) {
+        if (m_commands.at(m_matchingCommands.at(0)).matchesExact(m_keys) && !m_commands.at(m_matchingCommands.at(0)).needsMotion()) {
             if (m_viInputModeManager->getCurrentViMode() == ViMode::NormalMode) {
                 m_viInputModeManager->inputAdapter()->setCaretStyle(KateRenderer::Block);
             }
 
-            Command *cmd = m_commands.at(m_matchingCommands.at(0));
-            executeCommand(cmd);
+            Command &cmd = m_commands.at(m_matchingCommands.at(0));
+            executeCommand(&cmd);
 
             // check if reset() should be called. some commands in visual mode should not end visual mode
-            if (cmd->shouldReset()) {
+            if (cmd.shouldReset()) {
                 reset();
                 m_view->setBlockSelection(false);
             }
diff --git a/src/vimode/modes/normalvimode.h b/src/vimode/modes/normalvimode.h
index 48e280bc..b81dfc90 100644
--- a/src/vimode/modes/normalvimode.h
+++ b/src/vimode/modes/normalvimode.h
@@ -10,7 +10,9 @@
 #ifndef KATEVI_NORMAL_VI_MODE_H
 #define KATEVI_NORMAL_VI_MODE_H
 
+#include <vimode/command.h>
 #include <vimode/modes/modebase.h>
+#include <vimode/motion.h>
 #include <vimode/range.h>
 
 #include <QHash>
@@ -18,6 +20,8 @@
 #include <QStack>
 #include <QVector>
 
+#include <vector>
+
 #include <ktexteditor/range.h>
 #include <ktexteditor_export.h>
 
@@ -26,8 +30,6 @@ class KateViInputMode;
 
 namespace KateVi
 {
-class Command;
-class Motion;
 class KeyParser;
 class InputModeManager;
 
@@ -336,8 +338,8 @@ protected:
     int m_motionOperatorIndex;
     int m_scroll_count_limit;
 
-    QVector<Command *> m_commands;
-    QVector<Motion *> m_motions;
+    std::vector<Command> m_commands;
+    std::vector<Motion> m_motions;
     QVector<int> m_matchingCommands;
     QVector<int> m_matchingMotions;
     QStack<int> m_awaitingMotionOrTextObject;
diff --git a/src/vimode/modes/replacevimode.cpp b/src/vimode/modes/replacevimode.cpp
index 85d39ccb..ae6eb197 100644
--- a/src/vimode/modes/replacevimode.cpp
+++ b/src/vimode/modes/replacevimode.cpp
@@ -22,11 +22,6 @@ ReplaceViMode::ReplaceViMode(InputModeManager *viInputModeManager, KTextEditor::
     m_count = 1;
 }
 
-ReplaceViMode::~ReplaceViMode()
-{
-    /* There's nothing to do here. */
-}
-
 bool ReplaceViMode::commandInsertFromLine(int offset)
 {
     KTextEditor::Cursor c(m_view->cursorPosition());
diff --git a/src/vimode/modes/replacevimode.h b/src/vimode/modes/replacevimode.h
index be214180..1b238dc2 100644
--- a/src/vimode/modes/replacevimode.h
+++ b/src/vimode/modes/replacevimode.h
@@ -18,7 +18,6 @@ class ReplaceViMode : public ModeBase
 {
 public:
     explicit ReplaceViMode(InputModeManager *viInputModeManager, KTextEditor::ViewPrivate *view, KateViewInternal *viewInternal);
-    ~ReplaceViMode() override;
 
     /// Update the track of overwritten characters with the \p s character.
     inline void overwrittenChar(const QChar &s)
diff --git a/src/vimode/modes/visualvimode.cpp b/src/vimode/modes/visualvimode.cpp
index a85cde65..51aa31b3 100644
--- a/src/vimode/modes/visualvimode.cpp
+++ b/src/vimode/modes/visualvimode.cpp
@@ -17,9 +17,9 @@
 
 using namespace KateVi;
 
-#define ADDCMD(STR, FUNC, FLGS) m_commands.push_back(new Command(this, QStringLiteral(STR), &NormalViMode::FUNC, FLGS));
+#define ADDCMD(STR, FUNC, FLGS) m_commands.emplace_back(this, QStringLiteral(STR), &NormalViMode::FUNC, FLGS);
 
-#define ADDMOTION(STR, FUNC, FLGS) m_motions.push_back(new Motion(this, QStringLiteral(STR), &NormalViMode::FUNC, FLGS));
+#define ADDMOTION(STR, FUNC, FLGS) m_motions.emplace_back(this, QStringLiteral(STR), &NormalViMode::FUNC, FLGS);
 
 VisualViMode::VisualViMode(InputModeManager *viInputModeManager, KTextEditor::ViewPrivate *view, KateViewInternal *viewInternal)
     : NormalViMode(viInputModeManager, view, viewInternal)
@@ -31,10 +31,6 @@ VisualViMode::VisualViMode(InputModeManager *viInputModeManager, KTextEditor::Vi
     connect(m_view, &KTextEditor::ViewPrivate::selectionChanged, this, &VisualViMode::updateSelection);
 }
 
-VisualViMode::~VisualViMode()
-{
-}
-
 void VisualViMode::selectInclusive(const KTextEditor::Cursor &c1, const KTextEditor::Cursor &c2)
 {
     if (c1 >= c2) {
@@ -243,12 +239,8 @@ void VisualViMode::updateSelection()
 
 void VisualViMode::initializeCommands()
 {
-    // Remove the commands put in here by NormalMode
-    qDeleteAll(m_commands);
+    // Remove the commands & motions put in here by NormalMode
     m_commands.clear();
-
-    // Remove the motions put in here by NormalMode
-    qDeleteAll(m_motions);
     m_motions.clear();
 
     ADDCMD("J", commandJoinLines, IS_CHANGE);
diff --git a/src/vimode/modes/visualvimode.h b/src/vimode/modes/visualvimode.h
index de173bfc..a1160de4 100644
--- a/src/vimode/modes/visualvimode.h
+++ b/src/vimode/modes/visualvimode.h
@@ -23,7 +23,6 @@ class VisualViMode : public NormalViMode
 
 public:
     explicit VisualViMode(InputModeManager *viInputModeManager, KTextEditor::ViewPrivate *view, KateViewInternal *viewInternal);
-    ~VisualViMode() override;
 
     void init();
 
