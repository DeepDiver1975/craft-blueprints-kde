diff --git a/src/mainwindow.cpp b/src/mainwindow.cpp
index ad5c8c7d1..0d1e00024 100644
--- a/src/mainwindow.cpp
+++ b/src/mainwindow.cpp
@@ -95,6 +95,7 @@ SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
 #include <KConfigGroup>
 #include <QAction>
 #include <QClipboard>
+#include <QDesktopServices>
 #include <QDialogButtonBox>
 #include <QFileDialog>
 #include <QMenu>
@@ -560,8 +561,22 @@ void MainWindow::init(const QString &mltPath)
     previewButtonAction->setIcon(QIcon::fromTheme(QStringLiteral("preview-render-on")));
     previewButtonAction->setDefaultWidget(timelinePreview);
     addAction(QStringLiteral("timeline_preview_button"), previewButtonAction);
-
     setupGUI(KXmlGuiWindow::ToolBar | KXmlGuiWindow::StatusBar | KXmlGuiWindow::Save | KXmlGuiWindow::Create);
+
+    // Redirect help entry to our own function
+    // First delete the default help action
+    QAction *officialHelp = actionCollection()->action(KStandardAction::name(KStandardAction::HelpContents));
+    actionCollection()->removeAction(officialHelp);
+    // Now recreate our own
+    KStandardAction::helpContents(this, &MainWindow::appHelpActivated, actionCollection());
+    officialHelp = actionCollection()->action(KStandardAction::name(KStandardAction::HelpContents));
+    // Replug it in the Help menu
+    QMenu *helpMenu = static_cast<QMenu *>(factory()->container(QStringLiteral("help"), this));
+    if (helpMenu) {
+        QAction *whatsThis = actionCollection()->action(KStandardAction::name(KStandardAction::WhatsThis));
+        helpMenu->insertAction(whatsThis, officialHelp);
+    }
+
     LocaleHandling::resetLocale();
     if (firstRun) {
         if (QScreen *current = QApplication::primaryScreen()) {
@@ -4828,6 +4843,65 @@ void MainWindow::disconnectTimeline(TimelineWidget *timeline)
     pCore->monitorManager()->projectMonitor()->setProducer(nullptr, -2);
 }
 
+void MainWindow::appHelpActivated()
+{
+    // Don't use default help, show our website
+    // QDesktopServices::openUrl(QUrl(QStringLiteral("help:kdenlive")));
+    if (pCore->packageType() == QStringLiteral("appimage")) {
+        qDebug() << "::::: LAUNCHING APPIMAGE BROWSER.........";
+        QProcess process;
+        QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
+        qDebug() << "::: GOT ENV: " << env.value("LD_LIBRARY_PATH") << ", PATH: " << env.value("PATH") << "\n\nXDG:\n" << env.value("XDG_DATA_DIRS");
+        QStringList libPath = env.value(QStringLiteral("LD_LIBRARY_PATH")).split(QLatin1Char(':'), Qt::SkipEmptyParts);
+        QStringList updatedLDPath;
+        for (auto &s : libPath) {
+            if (!s.startsWith(QStringLiteral("/tmp/.mount_"))) {
+                updatedLDPath << s;
+            }
+        }
+        if (updatedLDPath.isEmpty()) {
+            env.remove(QStringLiteral("LD_LIBRARY_PATH"));
+        } else {
+            env.insert(QStringLiteral("LD_LIBRARY_PATH"), updatedLDPath.join(QLatin1Char(':')));
+        }
+        // Path
+        libPath = env.value(QStringLiteral("PATH")).split(QLatin1Char(':'), Qt::SkipEmptyParts);
+        updatedLDPath.clear();
+        for (auto &s : libPath) {
+            if (!s.startsWith(QStringLiteral("/tmp/.mount_"))) {
+                updatedLDPath << s;
+            }
+        }
+        if (updatedLDPath.isEmpty()) {
+            env.remove(QStringLiteral("PATH"));
+        } else {
+            env.insert(QStringLiteral("PATH"), updatedLDPath.join(QLatin1Char(':')));
+        }
+        // XDG
+        libPath = env.value(QStringLiteral("XDG_DATA_DIRS")).split(QLatin1Char(':'), Qt::SkipEmptyParts);
+        updatedLDPath.clear();
+        for (auto &s : libPath) {
+            if (!s.startsWith(QStringLiteral("/tmp/.mount_"))) {
+                updatedLDPath << s;
+            }
+        }
+        if (updatedLDPath.isEmpty()) {
+            env.remove(QStringLiteral("XDG_DATA_DIRS"));
+        } else {
+            env.insert(QStringLiteral("XDG_DATA_DIRS"), updatedLDPath.join(QLatin1Char(':')));
+        }
+        env.remove(QStringLiteral("QT_QPA_PLATFORM"));
+        process.setProcessEnvironment(env);
+        QString openPath = QStandardPaths::findExecutable(QStringLiteral("xdg-open"));
+        qDebug() << "------------\nFOUND OPEN PATH: " << openPath;
+        process.setProgram(openPath.isEmpty() ? QStringLiteral("xdg-open") : openPath);
+        process.setArguments({QStringLiteral("https://docs.kdenlive.org")});
+        process.startDetached();
+    } else {
+        QDesktopServices::openUrl(QUrl(QStringLiteral("https://docs.kdenlive.org")));
+    }
+}
+
 void MainWindow::slotCreateSequenceFromSelection()
 {
     pCore->projectManager()->slotCreateSequenceFromSelection();
diff --git a/src/mainwindow.h b/src/mainwindow.h
index f705a9286..ec472dfc2 100644
--- a/src/mainwindow.h
+++ b/src/mainwindow.h
@@ -337,6 +337,7 @@ public Q_SLOTS:
 
     void slotSwitchVideoThumbs();
     void slotSwitchAudioThumbs();
+    void appHelpActivated();
 
     void slotPreferences();
     void slotShowPreferencePage(Kdenlive::ConfigPage page, int option = -1);
