diff -ru a/cpan/Socket/Socket.xs b/cpan/Socket/Socket.xs
--- a/cpan/Socket/Socket.xs	2022-01-14 16:16:06.686454400 +0100
+++ b/cpan/Socket/Socket.xs	2022-01-14 16:20:25.506842700 +0100
@@ -79,54 +79,6 @@
 
 #endif
 
-static int inet_pton(int af, const char *src, void *dst)
-{
-  struct sockaddr_storage ss;
-  int size = sizeof(ss);
-  ss.ss_family = af; /* per MSDN */
-
-  if (WSAStringToAddress((char*)src, af, NULL, (struct sockaddr *)&ss, &size) != 0)
-    return 0;
-
-  switch(af) {
-    case AF_INET:
-      *(struct in_addr *)dst = ((struct sockaddr_in *)&ss)->sin_addr;
-      return 1;
-    case AF_INET6:
-      *(struct in6_addr *)dst = ((struct sockaddr_in6 *)&ss)->sin6_addr;
-      return 1;
-    default:
-      WSASetLastError(WSAEAFNOSUPPORT);
-      return -1;
-  }
-}
-
-static const char *inet_ntop(int af, const void *src, char *dst, socklen_t size)
-{
-  struct sockaddr_storage ss;
-  unsigned long s = size;
-
-  ZeroMemory(&ss, sizeof(ss));
-  ss.ss_family = af;
-
-  switch(af) {
-    case AF_INET:
-      ((struct sockaddr_in *)&ss)->sin_addr = *(struct in_addr *)src;
-      break;
-    case AF_INET6:
-      ((struct sockaddr_in6 *)&ss)->sin6_addr = *(struct in6_addr *)src;
-      break;
-    default:
-      return NULL;
-  }
-
-  /* cannot directly use &size because of strict aliasing rules */
-  if (WSAAddressToString((struct sockaddr *)&ss, sizeof(ss), NULL, dst, &s) != 0)
-    return NULL;
-  else
-    return dst;
-}
-
 #define HAS_INETPTON
 #define HAS_INETNTOP
 #endif
diff -ru a/dist/IO/poll.h b/dist/IO/poll.h
--- a/dist/IO/poll.h	2022-01-14 16:15:13.016454400 +0100
+++ b/dist/IO/poll.h	2022-01-14 16:19:00.971302500 +0100
@@ -10,7 +10,7 @@
 #ifndef POLL_H
 #  define POLL_H
 
-#if (defined(HAS_POLL) && defined(I_POLL)) || defined(POLLWRBAND)
+#if (defined(HAS_POLL) && defined(I_POLL))
 #  include <poll.h>
 #elif (defined(HAS_POLL) && defined(I_SYS_POLL))
 #  include <sys/poll.h>
@@ -27,25 +27,30 @@
 #endif
 #define poll Perl_my_poll
 
-typedef struct pollfd {
-    int fd;
-    short events;
-    short revents;
-} pollfd_t;
-
+#undef POLLIN
 #define	POLLIN		0x0001
+#undef POLLPRI
 #define	POLLPRI		0x0002
+#undef POLLOUT
 #define	POLLOUT		0x0004
+#undef POLLRDNORM
 #define	POLLRDNORM	0x0040
+#undef POLLWRNORM
 #define	POLLWRNORM	POLLOUT
+#undef POLLRDBAND
 #define	POLLRDBAND	0x0080
+#undef POLLWRBAND
 #define	POLLWRBAND	0x0100
+#undef POLLNORM
 #define	POLLNORM	POLLRDNORM
 
 /* Return ONLY events (NON testable) */
 
+#undef POLLERR
 #define	POLLERR		0x0008
+#undef POLLHUP
 #define	POLLHUP		0x0010
+#undef POLLNVAL
 #define	POLLNVAL	0x0020
 
 int poll (struct pollfd *, unsigned long, int);
