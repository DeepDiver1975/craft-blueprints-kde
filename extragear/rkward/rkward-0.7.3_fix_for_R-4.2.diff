diff -Nrub -x '*~' -x '*\.rej' -x '*\.orig' -x '*\.o' -x '*\.pyc' -x CMakeLists.txt.user rkward-0.7.3.orig/rkward/rbackend/rkrbackend.cpp rkward-0.7.3/rkward/rbackend/rkrbackend.cpp
--- rkward-0.7.3.orig/rkward/rbackend/rkrbackend.cpp	2022-04-17 00:02:17.000000000 +0200
+++ rkward-0.7.3/rkward/rbackend/rkrbackend.cpp	2022-04-22 22:07:07.714248200 +0200
@@ -820,7 +820,11 @@
 	RK_R_Params.home = getRUser ();
 	RK_R_Params.CharacterMode = RGui;
 	RK_R_Params.ShowMessage = RShowMessage;
+#if R_VERSION < R_Version(4, 2, 0)
 	RK_R_Params.ReadConsole = RReadConsoleWin;
+#else
+	RK_R_Params.ReadConsole = RReadConsole;
+#endif
 	RK_R_Params.WriteConsoleEx = RWriteConsoleEx;
 	RK_R_Params.WriteConsole = 0;
 	RK_R_Params.CallBack = RKREventLoop::winRKEventHandlerWrapper;
diff -Nrub -x '*~' -x '*\.rej' -x '*\.orig' -x '*\.o' -x '*\.pyc' -x CMakeLists.txt.user rkward-0.7.3.orig/rkward/rbackend/rkwarddevice/rkgraphicsdevice_setup.cpp rkward-0.7.3/rkward/rbackend/rkwarddevice/rkgraphicsdevice_setup.cpp
--- rkward-0.7.3.orig/rkward/rbackend/rkwarddevice/rkgraphicsdevice_setup.cpp	2022-04-09 11:16:21.000000000 +0200
+++ rkward-0.7.3/rkward/rbackend/rkwarddevice/rkgraphicsdevice_setup.cpp	2022-04-22 22:10:48.515032800 +0200
@@ -74,11 +74,7 @@
 	pDevDesc dev;
 	BEGIN_SUSPEND_INTERRUPTS {
 		/* Allocate and initialize the device driver data */
-#ifdef _MSC_VER
-		dev = (pDevDesc) malloc (sizeof (DevDesc));
-#else
-		dev = (pDevDesc) calloc (1, sizeof (DevDesc)); // don't really understand this, but R needs it this way (while MSVC hates it)
-#endif
+		dev = (pDevDesc) R_Calloc(1, DevDesc);
 		// NOTE: The call to RKGraphicsDeviceBackendTransmitter::instance(), here is important beyond error checking. It might *create* the instance and connection, if this is the first use.
 		if (!(dev && RKGraphicsDeviceBackendTransmitter::instance () && desc->init (dev, pointsize, family, bg))) {
 			free (dev);
diff -Nrub -x '*~' -x '*\.rej' -x '*\.orig' -x '*\.o' -x '*\.pyc' -x CMakeLists.txt.user rkward-0.7.3.orig/rkward/rbackend/rkwarddevice/rkgraphicsdevice_stubs.cpp rkward-0.7.3/rkward/rbackend/rkwarddevice/rkgraphicsdevice_stubs.cpp
--- rkward-0.7.3.orig/rkward/rbackend/rkwarddevice/rkgraphicsdevice_stubs.cpp	2022-04-09 11:16:21.000000000 +0200
+++ rkward-0.7.3/rkward/rbackend/rkwarddevice/rkgraphicsdevice_stubs.cpp	2022-04-22 22:10:43.776709200 +0200
@@ -404,20 +404,8 @@
 	{
 		RKGraphicsDataStreamWriteGuard guard;
 		WRITE_HEADER (RKDClose, dev);
-#ifdef _MSC_VER
-	// Ok, this is a terribly crude HACK, obviously, and it's just waiting to come back to bite us. However:
-	// We had to allocate the DevDesc in our own (MSVC-compiled) code (that's the way it is done), but if we allow R to delete
-	// it (also, as usual; in its MinGW-compiled code), we get a crash. Whatever the _exact_ reason. So what we do here is
-	// reset R's pointer, and do the free, ourselves. Fortunately, we can do this, and fortunately, the pointer is no longer
-	// needed at this point. At least not in R 3.2.3...
-	// If (or when) this breaks, we could try to just call some other device's init-routine, then hijack that device. Or out-source
-	// the RKGraphicsDevice backend init code into an R package...
-	// Or can we use R's Calloc/Malloc, instead? -> Manual caution not to use free() (only Free()), on that, though.
-		static_cast<RKGraphicsDeviceDesc*> (dev->deviceSpecific)->rgdevdesc->dev = NULL;
-	free (dev);
-#endif
-		delete static_cast<RKGraphicsDeviceDesc*> (dev->deviceSpecific);
 	}
+	delete static_cast<RKGraphicsDeviceDesc*> (dev->deviceSpecific);
 	{
 		RKGraphicsDataStreamReadGuard rguard;
 		qint8 dummy;
