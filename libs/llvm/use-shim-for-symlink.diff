diff -Nrub -x '*~' -x '*\.rej' -x '*\.orig' -x '*\.o' -x '*\.pyc' -x CMakeLists.txt.user llvm-project-15.0.2.src\llvm.orig/cmake/modules/LLVMInstallSymlink.cmake llvm-project-15.0.2.src\llvm/cmake/modules/LLVMInstallSymlink.cmake
--- llvm-project-15.0.2.src\llvm.orig/cmake/modules/LLVMInstallSymlink.cmake	2022-10-04 11:29:17.000000000 +0200
+++ llvm-project-15.0.2.src/llvm/cmake/modules/LLVMInstallSymlink.cmake	2022-10-30 13:52:21.531745000 +0100
@@ -7,19 +7,26 @@
 function(install_symlink name target outdir)
   set(DESTDIR $ENV{DESTDIR})
   if(NOT IS_ABSOLUTE "${outdir}")
-    set(outdir "${CMAKE_INSTALL_PREFIX}/${outdir}")
+    set(PREFIX ${CMAKE_INSTALL_PREFIX})
+    if (CMAKE_HOST_WIN32)
+      # strip drive letter (C:) from path
+      string(SUBSTRING ${PREFIX} 2 -1 PREFIX)
+    endif()
+    set(outdir "${PREFIX}/${outdir}")
   endif()
   set(outdir "${DESTDIR}${outdir}")
 
   message(STATUS "Creating ${name}")
 
+  if(CMAKE_HOST_WIN32)
   execute_process(
-    COMMAND "${CMAKE_COMMAND}" -E create_symlink "${target}" "${name}"
-    WORKING_DIRECTORY "${outdir}" ERROR_VARIABLE has_err)
-  if(CMAKE_HOST_WIN32 AND has_err)
+      COMMAND "kshimgen" --create "${name}" "${target}" --keep-argv0
+      WORKING_DIRECTORY "${outdir}")
+  else()
     execute_process(
-      COMMAND "${CMAKE_COMMAND}" -E copy "${target}" "${name}"
+      COMMAND "${CMAKE_COMMAND}" -E create_symlink "${target}" "${name}"
       WORKING_DIRECTORY "${outdir}")
   endif()
 
+
 endfunction()

diff -Nrub -x '*~' -x '*\.rej' -x '*\.orig' -x '*\.o' -x '*\.pyc' -x CMakeLists.txt.user llvm-project-16.0.1.src.orig/llvm/lib/Support/Windows/Process.inc llvm-project-16.0.1.src/llvm/lib/Support/Windows/Process.inc
--- llvm-project-16.0.1.src.orig/llvm/lib/Support/Windows/Process.inc	2023-04-05 05:36:38.000000000 +0200
+++ llvm-project-16.0.1.src/llvm/lib/Support/Windows/Process.inc	2023-07-27 09:52:43.193988400 +0200
@@ -257,16 +257,6 @@

   if (Args.size() == 0)
     return std::make_error_code(std::errc::invalid_argument);
-
-  SmallVector<char, MAX_PATH> Arg0(Args[0], Args[0] + strlen(Args[0]));
-  SmallVector<char, MAX_PATH> Filename;
-  sys::path::remove_filename(Arg0);
-  EC = GetExecutableName(Filename);
-  if (EC)
-    return EC;
-  sys::path::make_preferred(Arg0);
-  sys::path::append(Arg0, Filename);
-  Args[0] = Saver.save(Arg0).data();
   return std::error_code();
 }
