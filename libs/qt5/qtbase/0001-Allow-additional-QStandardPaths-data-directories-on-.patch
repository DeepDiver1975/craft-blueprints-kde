From b1f9c05e592ca5d04671e09fa0ead195a87831e9 Mon Sep 17 00:00:00 2001
From: Alex Richardson <arichardson.kde@gmail.com>
Date: Mon, 3 Sep 2018 10:16:48 +0100
Subject: [PATCH] Allow additional QStandardPaths data directories on macOS

On macOS QStandardPaths::GenericDataLocation only contains
"~/Library/Application Support" and "/Library/Application Support".
Package managers such as homebrew or KDE craft install into a custom
prefix and do not/cannot write to either of these directories. This makes
it impossible for them to share the generic data between different
applications. The current workaround used e.g. by homebrew-kde is to create
symlinks for every file/directory that is needed in /usr/local/share/ in
the user's "~/Library/Application Support" directory. However, this causes
issues if you forget to create the appropriate link and makes it difficult
for the user to override a data file from the system-wide installation with
a file in the home directory.

This commit introduces a ./configure option `-additional-datadir`.
This option can be passed multiple times to create a list of additional
directories that QStandardPaths searches before looking in
"/Library/Application Support".

[ChangeLog][QtCore][QStandardPaths] Added configure option
-additional-datadir to specify additional data directories.

Change-Id: I23b046fcc9520181286fe300827645cd608b0201
---
 config_help.txt                               |  3 +++
 configure.json                                |  1 +
 configure.pri                                 | 21 +++++++++++++++++++
 src/corelib/io/qstandardpaths_mac.mm          | 18 ++++++++++++++++
 .../io/qstandardpaths/qstandardpaths.pro      |  2 +-
 .../io/qstandardpaths/tst_qstandardpaths.cpp  | 21 +++++++++++++++++++
 6 files changed, 65 insertions(+), 1 deletion(-)

diff --git a/config_help.txt b/config_help.txt
index 5b32eb183f..e7478e1bcf 100644
--- a/config_help.txt
+++ b/config_help.txt
@@ -119,6 +119,9 @@ Build options:
                          through an app store by default, in particular Android,
                          iOS, tvOS, watchOS, and Universal Windows Platform. [auto]
 
+  -additional-datadir <dir> ... List of directories that QStandardPaths
+                         will search before the system locations (macOS only).
+
   -qtnamespace <name> .. Wrap all Qt library code in 'namespace <name> {...}'.
   -qtlibinfix <infix> .. Rename all libQt5*.so to libQt5*<infix>.so.
 
diff --git a/configure.json b/configure.json
index 3702c24f63..a6cf561f1b 100644
--- a/configure.json
+++ b/configure.json
@@ -57,6 +57,7 @@
             "android-sdk": "string",
             "android-toolchain-version": "string",
 
+            "additional-datadir": { "type": "addString", "name": "additional_datadirs" },
             "android-style-assets": "boolean",
             "appstore-compliant": "boolean",
             "avx": "boolean",
diff --git a/configure.pri b/configure.pri
index 64ed6b9ed8..f6018afd63 100644
--- a/configure.pri
+++ b/configure.pri
@@ -754,6 +754,16 @@ defineTest(qtConfOutput_preparePaths) {
         have_hostprefix = true
     }
 
+    !isEmpty(config.input.additional_datadirs) {
+        # Ensure that all the -additional-datadirs entries are absolute paths
+        extradirs =
+        for (dir, config.input.additional_datadirs) {
+            extradirs += $$absolute_path($$dir, $$OUT_PWD)
+        }
+        config.input.additional_datadirs = $$extradirs
+        export(config.input.additional_datadirs)
+    }
+
     PREFIX_COMPLAINTS =
     PREFIX_REMINDER = false
     win32: \
@@ -1207,6 +1217,17 @@ defineReplace(qtConfOutputPostProcess_publicHeader) {
     return($$output)
 }
 
+defineReplace(qtConfOutputPostProcess_privateHeader) {
+    output = $$1
+    # Add support for additional QStandardPaths::GenericDataLocation on macOS (useful for homebrew, etc.)
+    macos:!isEmpty(config.input.additional_datadirs) {
+        extraDataDirsDefine = $$join(config.input.additional_datadirs, \
+            "\"), QStringLiteral(\"", "{ QStringLiteral(\"", "\") }")
+        output += "$${LITERAL_HASH}define QT_STANDARDPATHS_ADDITIONAL_DATADIRS $$extraDataDirsDefine"
+    }
+    return($$output)
+}
+
 
 # custom reporting
 
diff --git a/src/corelib/io/qstandardpaths_mac.mm b/src/corelib/io/qstandardpaths_mac.mm
index 11b5cc8c37..a9b28f2739 100644
--- a/src/corelib/io/qstandardpaths_mac.mm
+++ b/src/corelib/io/qstandardpaths_mac.mm
@@ -184,6 +184,24 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
         dirs << writableLocation(PicturesLocation) << QLatin1String("assets-library://");
 #endif
 
+#if !defined(QT_BOOTSTRAPPED) && defined(Q_OS_MACOS)
+#ifdef QT_STANDARDPATHS_ADDITIONAL_DATADIRS
+    if (type == AppDataLocation || type == AppLocalDataLocation || type == GenericDataLocation) {
+        QStringList extraDataDirs;
+        // Add the value of -additional-datadir configure argument to the list.
+        // This allows e.g. homebrew to use a Qt build that is configured to search
+        // for generic data in /usr/local/share instead of requiring it to be in
+        // /Library/Application Support which is not writable from the homebrew sandbox.
+        extraDataDirs = QStringList(QT_STANDARDPATHS_ADDITIONAL_DATADIRS);
+        if (type == AppDataLocation || type == AppLocalDataLocation) {
+            for (QString &dir : extraDataDirs)
+                appendOrganizationAndApp(dir);
+        }
+        dirs << extraDataDirs;
+    }
+#endif
+#endif
+
     if (type == GenericDataLocation || type == FontsLocation || type == ApplicationsLocation
             || type == AppDataLocation || type == AppLocalDataLocation
             || type == GenericCacheLocation || type == CacheLocation) {
diff --git a/tests/auto/corelib/io/qstandardpaths/qstandardpaths.pro b/tests/auto/corelib/io/qstandardpaths/qstandardpaths.pro
index 9fd7047405..f7367a1612 100644
--- a/tests/auto/corelib/io/qstandardpaths/qstandardpaths.pro
+++ b/tests/auto/corelib/io/qstandardpaths/qstandardpaths.pro
@@ -1,6 +1,6 @@
 CONFIG += testcase
 TARGET = tst_qstandardpaths
-QT = core testlib
+QT = core-private testlib
 INCLUDEPATH += ../../../../shared/
 HEADERS += ../../../../shared/emulationdetector.h
 SOURCES = tst_qstandardpaths.cpp
diff --git a/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp b/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp
index 5cb130f631..cbeabf7dae 100644
--- a/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp
+++ b/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp
@@ -33,6 +33,7 @@
 #include <qfileinfo.h>
 #include <qsysinfo.h>
 #include <qregexp.h>
+#include <private/qglobal_p.h>
 #if defined(Q_OS_WIN) && !defined(Q_OS_WINRT) && !defined(Q_OS_WINCE)
 #  include <qt_windows.h>
 #endif
@@ -63,6 +64,7 @@ private slots:
     void enableTestMode();
     void testLocateAll();
     void testDataLocation();
+    void testAdditionalDataDirs();
     void testAppConfigLocation();
     void testFindExecutable_data();
     void testFindExecutable();
@@ -335,6 +337,25 @@ void tst_qstandardpaths::testDataLocation()
     QCoreApplication::setApplicationName(QString());
 }
 
+void tst_qstandardpaths::testAdditionalDataDirs()
+{
+    // If Qt was configured with -additional-datadir, QStandardPaths should return those directories
+#if !defined(QT_STANDARDPATHS_ADDITIONAL_DATADIRS)
+    QSKIP("-additional-datadir not passed to configure");
+#elif !defined(Q_OS_MACOS)
+    QSKIP("-additional-datadir not supported on current platform");
+#else
+    const QString writable = QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation);
+    const QStringList genericDirs = QStandardPaths::standardLocations(QStandardPaths::GenericDataLocation);
+    QStringList additionalDataDirs(QT_STANDARDPATHS_ADDITIONAL_DATADIRS);
+    QVERIFY2(!additionalDataDirs.empty(), "Define should not be set if the list is empty");
+    QVERIFY(genericDirs.size() > additionalDataDirs.size() + 1);
+    // The additional datadirs should be added just after the writable location
+    QCOMPARE(genericDirs.at(0), writable);
+    QCOMPARE(genericDirs.mid(1, additionalDataDirs.size()), additionalDataDirs);
+#endif
+}
+
 void tst_qstandardpaths::testAppConfigLocation()
 {
     // On all platforms where applications are not sandboxed,
-- 
2.19.0.windows.1

